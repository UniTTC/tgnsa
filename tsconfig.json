{
  "compilerOptions": {
    /* Посетите https://aka.ms/tsconfig, чтобы узнать больше об этом файле */

    /* Проекты */
    // "incremental": true,                              /* Сохранить файлы .tsbuildinfo для возможности инкрементной компиляции проектов. */
    // "composite": true,                                /* Включить ограничения, позволяющие использовать проект TypeScript с проектными ссылками. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Указать путь к файлу инкрементной компиляции .tsbuildinfo. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Отключить предпочтение исходных файлов перед файлами объявлений при использовании композитных проектных ссылок. */
    // "disableSolutionSearching": true,                 /* Отключить многопроектный поиск ссылок при редактировании. */
    // "disableReferencedProjectLoad": true,             /* Сократить количество автоматически загружаемых проектов TypeScript. */

    /* Язык и окружение */
    "target": "ES2022",                                  /* Задайте версию JavaScript для сгенерированного JavaScript и включите совместимые объявления библиотек. */
    // "lib": [],                                        /* Указать набор объединенных файлов объявлений библиотек, описывающих целевую среду выполнения. */
    // "jsx": "preserve",                                /* Указать, какой код JSX будет сгенерирован. */
    // "experimentalDecorators": true,                   /* Включить экспериментальную поддержку устаревших декораторов. */
    // "emitDecoratorMetadata": true,                    /* Генерировать метаданные дизайна для декорированных объявлений в исходных файлах. */
    // "jsxFactory": "",                                 /* Указать функцию фабрики JSX, используемую при генерации JSX, например, 'React.createElement' или 'h'. */
    // "jsxFragmentFactory": "",                         /* Указать ссылку на фрагмент JSX, используемую для фрагментов при генерации JSX, например, 'React.Fragment' или 'Fragment'. */
    // "jsxImportSource": "",                            /* Указать спецификатор модуля, используемый для импорта функций фабрики JSX при использовании 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Указать объект, вызываемый для 'createElement'. Применяется только при нацеливании на 'react' JSX. */
    // "noLib": true,                                    /* Отключить включение любых файлов библиотек, включая lib.d.ts по умолчанию. */
    // "useDefineForClassFields": true,                  /* Генерировать поля классов в соответствии с стандартами ECMAScript. */
    // "moduleDetection": "auto",                        /* Управление методом обнаружения файлов модуля JS. */

    /* Модули */
    "module": "NodeNext",                                /* Указать, какой код модуля будет сгенерирован. */
    // "rootDir": "./",                                  /* Указать корневую папку внутри ваших исходных файлов. */
    "moduleResolution": "NodeNext",                     /* Указать, как TypeScript ищет файл по заданному спецификатору модуля. */
    // "baseUrl": "./",                                  /* Указать базовый каталог для разрешения неотносительных имен модулей. */
    // "paths": {},                                      /* Указать набор записей, которые перенаправляют импорты в дополнительные каталоги поиска. */
    // "rootDirs": [],                                   /* Позволить нескольким папкам считаться одной при разрешении модулей. */
    // "typeRoots": [],                                  /* Указать несколько папок, действующих как './node_modules/@types'. */
    // "types": [],                                      /* Указать имена пакетов типов, которые должны быть включены, не будучи использованными в исходном файле. */
    // "allowUmdGlobalAccess": true,                     /* Разрешить доступ к глобальным объектам UMD из модулей. */
    // "moduleSuffixes": [],                             /* Список суффиксов имен файлов для поиска при разрешении модуля. */
    // "allowImportingTsExtensions": true,               /* Разрешить импорты файлов TypeScript с расширением. Требует '--moduleResolution bundler' и одной из '--noEmit' или '--emitDeclarationOnly'. */
    // "resolvePackageJsonExports": true,                /* Использовать поле 'exports' в package.json при разрешении импортов пакетов. */
    // "resolvePackageJsonImports": true,                /* Использовать поле 'imports' в package.json при разрешении импортов. */
    // "customConditions": [],                           /* Условия для установки, дополнительно к стандартным значениям при разрешении импортов. */
    // "resolveJsonModule": true,                        /* Разрешить импорт файлов .json. */
    // "allowArbitraryExtensions": true,                 /* Разрешить импорт файлов с любым расширением, если присутствует файл объявлений. */
    // "noResolve": true,                                /* Запретить расширение количества файлов, которое TypeScript должен добавить в проект. */

    /* Поддержка JavaScript */
    // "allowJs": true,                                  /* Разрешить использование файлов JavaScript в вашей программе. Используйте параметр 'checkJS' для вывода ошибок из этих файлов. */
    // "checkJs": true,                                  /* Включить отчет об ошибках в файлах JavaScript, проверяемых по типам. */
    // "maxNodeModuleJsDepth": 1,                        /* Указать максимальную глубину папки для проверки файлов JavaScript из 'node_modules'. Применимо только с параметром 'allowJs'. */

    /* Компиляция */
    // "declaration": true,                              /* Создавать файлы .d.ts из файлов TypeScript и JavaScript в вашем проекте. */
    // "declarationMap": true,                           /* Создавать карты исходников для файлов .d.ts. */
    // "emitDeclarationOnly": true,                      /* Выводить только файлы .d.ts, а не JavaScript. */
    // "sourceMap": true,                                /* Создавать файлы карты исходников для сгенерированных файлов JavaScript. */
    // "inlineSourceMap": true,                          /* Включить файлы карты исходников внутри сгенерированного JavaScript. */
    // "outFile": "./",                                  /* Указать файл, который объединяет все выходные файлы в один файл JavaScript. Если 'declaration' установлено в true, также обозначает файл, объединяющий все .d.ts файлы. */
    // "outDir": "./",                                   /* Указать каталог для всех сгенерированных файлов. */
    // "removeComments": true,                           /* Отключить создание комментариев. */
    // "noEmit": true,                                   /* Отключить генерацию файлов во время компиляции. */
    // "importHelpers": true,                            /* Разрешить импорт вспомогательных функций из tslib один раз на проект, вместо включения их в каждый файл. */
    // "importsNotUsedAsValues": "remove",               /* Указать поведение при генерации/проверке импортов, которые используются только для типов. */
    // "downlevelIteration": true,                       /* Генерировать более совместимый, но более длинный и менее производительный JavaScript для итерации. */
    // "sourceRoot": "",                                 /* Указать корневой путь для поиска исходных файлов для отладчиков. */
    // "mapRoot": "",                                    /* Указать расположение файлов карты исходников для отладчика вместо сгенерированных местоположений. */
    // "inlineSources": true,                            /* Включить исходный код в карты исходников внутри сгенерированного JavaScript. */
    // "emitBOM": true,                                  /* Генерировать маркер порядка байтов (BOM) UTF-8 в начале выходных файлов. */
    // "newLine": "crlf",                                /* Установить символ новой строки для генерируемых файлов. */
    // "stripInternal": true,                            /* Отключить генерацию объявлений, содержащих '@internal' в их JSDoc-комментариях. */
    // "noEmitHelpers": true,                            /* Отключить создание пользовательских вспомогательных функций, таких как '__extends', в скомпилированном выводе. */
    // "noEmitOnError": true,                            /* Отключить генерацию файлов в случае сообщения об ошибках типизации. */
    // "preserveConstEnums": true,                       /* Отключить стирание объявлений 'const enum' в сгенерированном коде. */
    // "declarationDir": "./",                           /* Указать каталог для сгенерированных файлов объявлений. */
    // "preserveValueImports": true,                     /* Сохранить неиспользуемые импортированные значения в выходном JavaScript, которые в противном случае будут удалены. */

    /* Ограничения взаимодействия */
    // "isolatedModules": true,                          /* Обеспечить безопасную транспиляцию каждого файла без зависимости от других импортов. */
    // "verbatimModuleSyntax": true,                     /* Не изменять или устранять какие-либо импорты или экспорты, не помеченные как только типовые, обеспечивая их запись в формате файла вывода на основе настройки 'module'. */
    // "allowSyntheticDefaultImports": true,             /* Разрешить 'import x from y', когда модуль не имеет экспорта по умолчанию. */
    // "esModuleInterop": true,                          /* Генерировать дополнительный JavaScript для облегчения поддержки импорта модулей CommonJS. Это также включает 'allowSyntheticDefaultImports' для совместимости типов. */
    // "preserveSymlinks": true,                         /* Отключить разрешение символических ссылок к их реальному пути. Это соответствует флагу с тем же названием в node. */
    "forceConsistentCasingInFileNames": true,            /* Обеспечить правильное написание в именах файлов при импорте. */
    "resolveJsonModule": true,
    /* Проверка типов */
    "strict": true,                                      /* Включить все опции строгой проверки типов. */
    // "noImplicitAny": true,                            /* Включить отчет об ошибках для выражений и объявлений с подразумеваемым типом 'any'. */
    // "strictNullChecks": true,                         /* При проверке типов учитывать 'null' и 'undefined'. */
    // "strictFunctionTypes": true,                      /* При присвоении функций проверять, чтобы параметры и возвращаемые значения были совместимы по подтипу. */
    // "strictBindCallApply": true,                      /* Проверять, что аргументы для методов 'bind', 'call' и 'apply' соответствуют оригинальной функции. */
    // "strictPropertyInitialization": true,             /* Проверять наличие свойств класса, которые объявлены, но не установлены в конструкторе. */
    // "noImplicitThis": true,                           /* Включить отчет об ошибках, когда 'this' имеет тип 'any'. */
    // "useUnknownInCatchVariables": true,               /* По умолчанию переменные блока catch имеют тип 'unknown', а не 'any'. */
    // "alwaysStrict": true,                             /* Убедиться, что 'use strict' всегда генерируется. */
    // "noUnusedLocals": true,                           /* Включить отчет об ошибках, когда локальные переменные не используются. */
    // "noUnusedParameters": true,                       /* Генерировать ошибку, когда параметр функции не используется. */
    // "exactOptionalPropertyTypes": true,               /* Разрешить типы необязательных свойств интерпретировать так, как написано, а не добавлять 'undefined'. */
    // "noImplicitReturns": true,                        /* Включить отчет об ошибках для кодовых путей, которые не возвращают явно значение в функции. */
    // "noFallthroughCasesInSwitch": true,               /* Включить отчет об ошибках для пропущенных случаев в операторах switch. */
    // "noUncheckedIndexedAccess": true,                 /* Добавить 'undefined' к типу при доступе с использованием индекса. */
    // "noImplicitOverride": true,                       /* Убедиться, что переопределение членов в производных классах помечено модификатором 'override'. */
    // "noPropertyAccessFromIndexSignature": true,       /* Запретить доступ через свойства для ключей, объявленных с использованием индексного типа. */
    // "allowUnusedLabels": true,                        /* Отключить отчет об ошибках для неиспользуемых меток. */
    // "allowUnreachableCode": true,                     /* Отключить отчет об ошибках для недостижимого кода. */

    /* Полнота */
    // "skipDefaultLibCheck": true,                      /* Пропустить проверку .d.ts файлов, которые включены в TypeScript. */
    "skipLibCheck": true                                 /* Пропустить проверку типов всех .d.ts файлов. */
  }
}
