[
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "puresnmp",
        "description": "puresnmp",
        "isExtraImport": true,
        "detail": "puresnmp",
        "documentation": {}
    },
    {
        "label": "V2C",
        "importPath": "puresnmp",
        "description": "puresnmp",
        "isExtraImport": true,
        "detail": "puresnmp",
        "documentation": {}
    },
    {
        "label": "PyWrapper",
        "importPath": "puresnmp",
        "description": "puresnmp",
        "isExtraImport": true,
        "detail": "puresnmp",
        "documentation": {}
    },
    {
        "label": "member_ports",
        "kind": 2,
        "importPath": "python.ps",
        "description": "python.ps",
        "peekOfCode": "def member_ports(string):\n    first_four_bytes = string[:4]  # Получаем первые 4 байта\n    integer_value = int.from_bytes(first_four_bytes, byteorder='big')\n    binary_string = format(integer_value, 'b')   \n    return binary_string\nip_address = sys.argv[1]\ncommunity = sys.argv[2]\nasync def member():\n    oid = sys.argv[3]\n    client = PyWrapper(Client(ip_address, V2C(community)))",
        "detail": "python.ps",
        "documentation": {}
    },
    {
        "label": "decode_ports",
        "kind": 2,
        "importPath": "python.ps",
        "description": "python.ps",
        "peekOfCode": "def decode_ports(ports_sequence):\n    ports_list = []\n    for i, bit in enumerate(ports_sequence, 1):\n        if bit == '1':\n            ports_list.append(str(i))\n    return ports_list\ndef classify_ports(member_ports, untagged_ports):\n    member_ports = set(member_ports)\n    untagged_ports = set(untagged_ports)\n    # Находим порты, отмеченные как untagged",
        "detail": "python.ps",
        "documentation": {}
    },
    {
        "label": "classify_ports",
        "kind": 2,
        "importPath": "python.ps",
        "description": "python.ps",
        "peekOfCode": "def classify_ports(member_ports, untagged_ports):\n    member_ports = set(member_ports)\n    untagged_ports = set(untagged_ports)\n    # Находим порты, отмеченные как untagged\n    untagged = list(member_ports.intersection(untagged_ports))\n    untagged.sort()\n    # Находим порты, которые есть в member_ports, но отсутствуют в untagged_ports\n    tagged = list(member_ports.difference(untagged_ports))\n    tagged.sort()\n    return untagged, tagged",
        "detail": "python.ps",
        "documentation": {}
    },
    {
        "label": "ip_address",
        "kind": 5,
        "importPath": "python.ps",
        "description": "python.ps",
        "peekOfCode": "ip_address = sys.argv[1]\ncommunity = sys.argv[2]\nasync def member():\n    oid = sys.argv[3]\n    client = PyWrapper(Client(ip_address, V2C(community)))\n    output = await client.get(oid)\n    member = member_ports(output)\n    return member\nasync def untagged():\n    oid = sys.argv[4]",
        "detail": "python.ps",
        "documentation": {}
    },
    {
        "label": "community",
        "kind": 5,
        "importPath": "python.ps",
        "description": "python.ps",
        "peekOfCode": "community = sys.argv[2]\nasync def member():\n    oid = sys.argv[3]\n    client = PyWrapper(Client(ip_address, V2C(community)))\n    output = await client.get(oid)\n    member = member_ports(output)\n    return member\nasync def untagged():\n    oid = sys.argv[4]\n    client = PyWrapper(Client(ip_address, V2C(community)))",
        "detail": "python.ps",
        "documentation": {}
    },
    {
        "label": "result_member",
        "kind": 5,
        "importPath": "python.ps",
        "description": "python.ps",
        "peekOfCode": "result_member = asyncio.run(member())\nresult_forbriden = asyncio.run(forbriden())\nresult_untagged = asyncio.run(untagged())\nuntagged, tagged = classify_ports(result_member,result_untagged)\nprint(f\"{decode_ports(result_member)}\\n{decode_ports(result_untagged)}\\n\\n{untagged}\\n{tagged}\")",
        "detail": "python.ps",
        "documentation": {}
    },
    {
        "label": "result_forbriden",
        "kind": 5,
        "importPath": "python.ps",
        "description": "python.ps",
        "peekOfCode": "result_forbriden = asyncio.run(forbriden())\nresult_untagged = asyncio.run(untagged())\nuntagged, tagged = classify_ports(result_member,result_untagged)\nprint(f\"{decode_ports(result_member)}\\n{decode_ports(result_untagged)}\\n\\n{untagged}\\n{tagged}\")",
        "detail": "python.ps",
        "documentation": {}
    },
    {
        "label": "result_untagged",
        "kind": 5,
        "importPath": "python.ps",
        "description": "python.ps",
        "peekOfCode": "result_untagged = asyncio.run(untagged())\nuntagged, tagged = classify_ports(result_member,result_untagged)\nprint(f\"{decode_ports(result_member)}\\n{decode_ports(result_untagged)}\\n\\n{untagged}\\n{tagged}\")",
        "detail": "python.ps",
        "documentation": {}
    }
]